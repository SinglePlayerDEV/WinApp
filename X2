#include "MyForm.h"

using namespace System;
using namespace System::Windows::Forms;
using namespace System::IO;

public ref class MainForm : public Form {
private:
    TextBox^ directoryInput;
    Button^ refreshButton;
    Button^ deleteButton;
    Button^ copyButton;
    Button^ backButton; // Кнопка "Назад"
    Button^ openWindowsButton; // Кнопка "Открыть через Windows"
    ListView^ listView;
    String^ previousDirectory; // Переменная для хранения предыдущей директории

public:
    MainForm() {
        this->Text = "Файловый менеджер";
        this->Width = 800;
        this->Height = 600;

        // Поле ввода директории
        directoryInput = gcnew TextBox();
        directoryInput->Width = 600;
        directoryInput->Top = 10;
        directoryInput->Left = 10;

        // Кнопка обновления
        refreshButton = gcnew Button();
        refreshButton->Text = "Обновить";
        refreshButton->Top = 10;
        refreshButton->Left = 620;
        refreshButton->Click += gcnew EventHandler(this, &MainForm::LoadDirectory);

        // Кнопка "Назад"
        backButton = gcnew Button();
        backButton->Text = "Назад";
        backButton->Top = 10;
        backButton->Left = 700;
        backButton->Click += gcnew EventHandler(this, &MainForm::GoBack);

        // Кнопка "Открыть через Windows"
        openWindowsButton = gcnew Button();
        openWindowsButton->Text = "Открыть через Windows";
        openWindowsButton->Top = 510;
        openWindowsButton->Left = 620;
        openWindowsButton->Width = 150;
        openWindowsButton->Click += gcnew EventHandler(this, &MainForm::OpenFolderInWindows);

        // ListView для отображения содержимого
        listView = gcnew ListView();
        listView->View = View::Details;
        listView->Columns->Add("Имя", 300);
        listView->Columns->Add("Тип", 150);
        listView->Columns->Add("Размер", 100);
        listView->Top = 50;
        listView->Left = 10;
        listView->Width = 760;
        listView->Height = 450;

        // Обработка двойного щелчка
        listView->DoubleClick += gcnew EventHandler(this, &MainForm::OpenSelectedItem);

        // Кнопка удаления
        deleteButton = gcnew Button();
        deleteButton->Text = "Удалить";
        deleteButton->Top = 510;
        deleteButton->Left = 10;
        deleteButton->Click += gcnew EventHandler(this, &MainForm::DeleteSelectedItem);

        // Кнопка копирования
        copyButton = gcnew Button();
        copyButton->Text = "Копировать";
        copyButton->Top = 510;
        copyButton->Left = 100;
        copyButton->Click += gcnew EventHandler(this, &MainForm::CopySelectedItem);

        // Добавление компонентов на форму
        this->Controls->Add(directoryInput);
        this->Controls->Add(refreshButton);
        this->Controls->Add(backButton);
        this->Controls->Add(openWindowsButton);
        this->Controls->Add(listView);
        this->Controls->Add(deleteButton);
        this->Controls->Add(copyButton);

        previousDirectory = ""; // Инициализация переменной для хранения предыдущей директории
    }

private:
    // Загрузка содержимого директории
    void LoadDirectory(Object^ sender, EventArgs^ e) {
        if (Directory::Exists(directoryInput->Text)) {
            previousDirectory = directoryInput->Text; // Сохраняем текущую директорию как "предыдущую"
            listView->Items->Clear();
            String^ directory = directoryInput->Text;

            for each(String ^ folder in Directory::GetDirectories(directory)) {
                ListViewItem^ item = gcnew ListViewItem(Path::GetFileName(folder));
                item->SubItems->Add("Папка");
                item->Tag = folder;
                listView->Items->Add(item);
            }

            for each(String ^ file in Directory::GetFiles(directory)) {
                FileInfo^ fileInfo = gcnew FileInfo(file);
                ListViewItem^ item = gcnew ListViewItem(Path::GetFileName(file));
                item->SubItems->Add("Файл");
                item->SubItems->Add(fileInfo->Length.ToString() + " байт");
                item->Tag = file;
                listView->Items->Add(item);
            }
        }
        else {
            MessageBox::Show("Директория не найдена!", "Ошибка", MessageBoxButtons::OK, MessageBoxIcon::Error);
        }
    }

    // Переход в предыдущую директорию
    void GoBack(Object^ sender, EventArgs^ e) {
        if (!String::IsNullOrEmpty(previousDirectory)) {
            directoryInput->Text = previousDirectory;
            LoadDirectory(sender, e);
        }
        else {
            MessageBox::Show("Нет предыдущей директории!", "Ошибка", MessageBoxButtons::OK, MessageBoxIcon::Warning);
        }
    }

    // Открытие папки через окно Windows
    void OpenFolderInWindows(Object^ sender, EventArgs^ e) {
        FolderBrowserDialog^ folderDialog = gcnew FolderBrowserDialog();
        if (folderDialog->ShowDialog() == System::Windows::Forms::DialogResult::OK) {
            directoryInput->Text = folderDialog->SelectedPath;
            LoadDirectory(sender, e);
        }
    }

    // Обработка двойного щелчка
    void OpenSelectedItem(Object^ sender, EventArgs^ e) {
        if (listView->SelectedItems->Count > 0) {
            String^ path = listView->SelectedItems[0]->Tag->ToString();

            if (Directory::Exists(path)) {
                previousDirectory = directoryInput->Text; // Сохраняем текущую директорию как "предыдущую"
                directoryInput->Text = path;
                LoadDirectory(sender, e);
            }
            else if (File::Exists(path)) {
                try {
                    System::Diagnostics::Process::Start(path);
                }
                catch (Exception^ ex) {
                    MessageBox::Show("Не удалось открыть файл: " + ex->Message, "Ошибка", MessageBoxButtons::OK, MessageBoxIcon::Error);
                }
            }
        }
    }

    // Удаление выбранного элемента
    void DeleteSelectedItem(Object^ sender, EventArgs^ e) {
        if (listView->SelectedItems->Count > 0) {
            String^ path = listView->SelectedItems[0]->Tag->ToString();

            try {
                if (Directory::Exists(path)) {
                    Directory::Delete(path, true);
                }
                else if (File::Exists(path)) {
                    File::Delete(path);
                }
                LoadDirectory(sender, e);
            }
            catch (Exception^ ex) {
                MessageBox::Show("Ошибка при удалении: " + ex->Message, "Ошибка", MessageBoxButtons::OK, MessageBoxIcon::Error);
            }
        }
        else {
            MessageBox::Show("Выберите элемент для удаления!", "Ошибка", MessageBoxButtons::OK, MessageBoxIcon::Warning);
        }
    }

    // Копирование выбранного элемента
    void CopySelectedItem(Object^ sender, EventArgs^ e) {
        if (listView->SelectedItems->Count > 0) {
            String^ source = listView->SelectedItems[0]->Tag->ToString();
            String^ destination = directoryInput->Text + "\\Копия_" + Path::GetFileName(source);

            try {
                if (Directory::Exists(source)) {
                    Directory::CreateDirectory(destination);
                    for each(String ^ file in Directory::GetFiles(source)) {
                        File::Copy(file, Path::Combine(destination, Path::GetFileName(file)), true);
                    }
                    for each(String ^ folder in Directory::GetDirectories(source)) {
                        Directory::CreateDirectory(Path::Combine(destination, Path::GetFileName(folder)));
                    }
                }
                else if (File::Exists(source)) {
                    File::Copy(source, destination, true);
                }
                LoadDirectory(sender, e);
            }
            catch (Exception^ ex) {
                MessageBox::Show("Ошибка при копировании: " + ex->Message, "Ошибка", MessageBoxButtons::OK, MessageBoxIcon::Error);
            }
        }
        else {
            MessageBox::Show("Выберите элемент для копирования!", "Ошибка", MessageBoxButtons::OK, MessageBoxIcon::Warning);
        }
    }
};

[STAThread]
int main(array<String^>^ args) {
    Application::EnableVisualStyles();
    Application::SetCompatibleTextRenderingDefault(false);
    Application::Run(gcnew MainForm);
    return 0;
}
