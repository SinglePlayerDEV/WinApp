#include <windows.h>
#include "SoftWareDefInitions.h"
#include<string>

using namespace std;

LRESULT CALLBACK SoftwareMainProcedure(HWND hWnd, UINT msg, WPARAM wp, LPARAM lp);
WNDCLASS NewWindowClass(HBRUSH BGcolor, HCURSOR Cursor, HINSTANCE hInst, HICON Icon, LPCWSTR Name, WNDPROC Procedure);


int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR	args, int ncmdshow) {

	WNDCLASS  SoftwareMainClass = NewWindowClass((HBRUSH)COLOR_WINDOW, LoadCursor(NULL, IDC_ARROW), hInst, LoadIcon(NULL, IDI_QUESTION), L"MainWndCLASS", SoftwareMainProcedure);

	if (!RegisterClass(&SoftwareMainClass)) { return -1; }
	MSG SoftwareMainMessage = { 0 };

	
	CreateWindow(L"MainWndCLASS", L"Fist c++ Window", WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 500, 270, NULL, NULL, NULL, NULL);
	while (GetMessage(&SoftwareMainMessage, NULL, NULL, NULL))
	{
		TranslateMessage(&SoftwareMainMessage);
		DispatchMessage(&SoftwareMainMessage);
	}
	return 0;
}

WNDCLASS NewWindowClass(HBRUSH BGcolor, HCURSOR Cursor, HINSTANCE hInst, HICON Icon, LPCWSTR Name, WNDPROC Procedure) {

	WNDCLASS NWC = { 0 };
	NWC.hCursor = Cursor;
	NWC.hInstance = hInst;
	NWC.hIcon = Icon;
	NWC.lpszClassName = Name;
	NWC.hbrBackground = BGcolor;
	NWC.lpfnWndProc = Procedure;

	return NWC;
}

LRESULT CALLBACK SoftwareMainProcedure(HWND hWnd, UINT msg, WPARAM wp, LPARAM lp) {

	switch (msg)
	{
	case WM_COMMAND:
		switch (wp)
		{
		
		case onClearField:
			SetWindowTextA(hEdidControl, "");
			break;
		case onReadfield:
			num = GetDlgItemInt(hWnd, DlgIndexNumber, FALSE, FALSE);		 
			SetWindowTextA(hStaticControl, to_string(num).c_str());
			// readChar =  GetWindowTextA(hEdidControl, Buffer, TextBufferSize);
			// SetWindowTextA(hStaticControl, Buffer);
			// SetWindowTextA(hStaticControl, ("symbols read: " + to_string(readChar)).c_str());
			break;
		case onSafeFile:
			if (GetSaveFileNameA(&ofn))	{	SaveDate(filename);}
			break;
		case onLoadFile:
			if (GetOpenFileNameA(&ofn))	{	LoadDate(filename);}
			break;
		case onExitProgramm:
			PostQuitMessage(0); 
			break;
		default: break;
		}
		break;

	case WM_CREATE:
		MainWndAddMenus(hWnd);
		MainWndAddWidgets(hWnd);
		SetOpenFileParams(hWnd);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default: return DefWindowProc(hWnd, msg, wp, lp);
		
	}

}
void MainWndAddMenus(HWND hWnd) {

	HMENU  RootMenu = CreateMenu();
	HMENU  SubMenu = CreateMenu();
	
	AppendMenu(SubMenu, MF_STRING, onSafeFile, L"safe");
	AppendMenu(SubMenu, MF_STRING, onLoadFile, L"load");

	AppendMenu(SubMenu, MF_SEPARATOR, NULL, NULL);
	AppendMenu(SubMenu, MF_STRING, onClearField, L"clear");

	AppendMenu(SubMenu, MF_SEPARATOR, NULL, NULL);
	AppendMenu(SubMenu, MF_STRING, onExitProgramm, L"exit");
	
	
	AppendMenu(RootMenu, MF_POPUP, (UINT_PTR)SubMenu, L"file");
	AppendMenu(RootMenu, MF_STRING, (UINT_PTR)SubMenu, L"help");
	
	SetMenu(hWnd, RootMenu);
}
void MainWndAddWidgets(HWND hWnd) 
{ 
	hStaticControl =  CreateWindowA("Static", "STATUS: ", WS_VISIBLE | WS_CHILD | ES_CENTER, 200, 5, 100, 30, hWnd, NULL, NULL, NULL);
	hEdidControl = CreateWindowA("edit", "this is edit control", WS_VISIBLE | WS_CHILD | ES_MULTILINE | WS_VSCROLL  , 5, 40, 470, 120, hWnd, NULL, NULL, NULL);
	NumbeControl = CreateWindowA("edit", "0", WS_VISIBLE | WS_CHILD | ES_CENTER | ES_NUMBER, 5, 170, 120, 30, hWnd, (HMENU)DlgIndexNumber, NULL, NULL);

	CreateWindowA("button", "clear", WS_VISIBLE | WS_CHILD | ES_CENTER, 5, 5, 120, 30, hWnd, (HMENU)onClearField, NULL, NULL);
	CreateWindowA("button", "Read", WS_VISIBLE | WS_CHILD | ES_CENTER, 130, 5, 50, 30, hWnd, (HMENU)onReadfield, NULL, NULL);
}

void SaveDate(LPCSTR path) 
{
	HANDLE FiletoSave = CreateFileA(
		path,
		GENERIC_WRITE,
		0,
		NULL,
		CREATE_ALWAYS,
		FILE_ATTRIBUTE_NORMAL,
		NULL);

	int saveLenth = GetWindowTextLength(hEdidControl) + 1;
	char* data = new char[saveLenth];

	saveLenth = GetWindowTextA(hEdidControl, data, saveLenth);

	DWORD bytesIterated;
	WriteFile(FiletoSave, data, saveLenth, &bytesIterated, NULL);	

	CloseHandle(FiletoSave);
	delete[] data;
}

void LoadDate(LPCSTR path) 
{

	HANDLE FiletoLoad = CreateFileA(
		path,
		GENERIC_READ,
		0,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL,
		NULL);

	DWORD byteIterated;

	ReadFile(FiletoLoad, Buffer, TextBufferSize, &byteIterated, NULL);

	SetWindowTextA(hEdidControl, Buffer);

	CloseHandle(FiletoLoad);
}

void SetOpenFileParams(HWND hWnd) 
{
	ZeroMemory(&ofn, sizeof(ofn));
	ofn.lStructSize = sizeof(ofn);
	ofn.hwndOwner = hWnd;
	ofn.lpstrFile = filename; 
	ofn.nMaxFile = sizeof(filename);
	ofn.lpstrFilter = ".txt";
	ofn.lpstrFileTitle = NULL;
	ofn.nMaxFileTitle = 0;
	ofn.lpstrInitialDir = "D:\\test\\output.txt";
	ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;
}
